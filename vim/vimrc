" {{{ --- Plugins --- 
call plug#begin('~/.vim/plugged')
"--- Look&Feel ---
Plug 'itchyny/lightline.vim'
Plug 'cocopon/iceberg.vim'
Plug 'rhysd/vim-healthcheck'
"--- Tools ---
Plug 'direnv/direnv.vim'
Plug 'gcmt/taboo.vim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-unimpaired'
Plug 'preservim/nerdtree'
Plug 'will133/vim-dirdiff'
"--- Editing ---
Plug 'Raimondi/delimitMate'
Plug 'godlygeek/tabular'            , {'on': 'Tabularize'}
Plug 'michaeljsmith/vim-indent-object'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
Plug 'mbbill/undotree'
"--- Git ---
Plug 'mattn/gist-vim'                , {'on': 'Gist'}
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
" Plug 'vim-scripts/gitignore'
"--- TMUX ---
Plug 'christoomey/vim-tmux-navigator'
Plug 'jpalardy/vim-slime'
Plug 'tmux-plugins/vim-tmux'        , {'for': 'tmux'}
"--- Programming ---
Plug 'AndrewRadev/splitjoin.vim'
Plug 'SirVer/ultisnips'
Plug 'andymass/vim-matchup'
Plug 'benmills/vimux'
Plug 'dense-analysis/ale'
Plug 'editorconfig/editorconfig-vim'
Plug 'honza/vim-snippets'
Plug 'vim-test/vim-test'
Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'
Plug 'mattn/vim-lsp-settings'
Plug 'mkalinski/vim-lightline_tagbar'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/vim-lsp'
Plug 'rhysd/vim-lsp-ale'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'micchy326/lightline-lsp-progress'
"--- Java ---
Plug 'mikelue/vim-maven-plugin'     , {'for': 'java'}
Plug 'udalov/javap-vim'
Plug 'uiiaoo/java-syntax.vim'
Plug 'udalov/kotlin-vim'
"--- CPP ---
Plug 'bfrg/vim-cpp-modern'
Plug 'alepez/vim-gtest'
"--- Markdown, Wiki, Todo ---
Plug 'freitass/todo.txt-vim'        , {'for': 'todo'}
Plug 'plasticboy/vim-markdown'      , {'for': 'markdown'}
Plug 'iamcco/markdown-preview.nvim' , {'for': ['markdown', 'vim-plug'], 'do': { -> mkdp#util#install() }}
Plug 'tenfyzhong/joplin.vim'        , {'on': ['Joplin', 'JoplinWinOpen']}
Plug 'jamessan/vim-gnupg'
"--- HTML ---
Plug 'mattn/emmet-vim'              , {'for': ['html', '*jsx', 'xml']}
Plug 'othree/html5.vim'             , {'for': ['html', '*jsx', 'xml']}
"--- CSS ---
Plug 'groenewege/vim-less'          , {'for': 'css'}
"--- JavaScript ---
Plug 'heavenshell/vim-jsdoc'        , {'for': 'javascript*'}
Plug 'moll/vim-node'                , {'for': 'javascript*'}
Plug 'othree/yajs.vim'              , {'for': 'javascript*'}
Plug 'pangloss/vim-javascript'      , {'for': 'javascript*'}
"--- React ---
Plug 'mxw/vim-jsx'                  , {'for': '*jsx'}
"--- TypeScript ---
Plug 'leafgarland/typescript-vim'   , {'for': 'typescript*'}
"--- DB
Plug 'kristijanhusak/vim-dadbod-ui'
Plug 'tpope/vim-dadbod'
"--- DevOps ---
Plug 'andrewstuart/vim-kubernetes'
Plug 'hashivim/vim-terraform'       , {'for': 'terraform'}
Plug 'pearofducks/ansible-vim'
Plug 'bazelbuild/vim-bazel'
" Plug 'cappyzawa/starlark.vim'       , {'for': 'starlark*'}
"--- Dependencies ---
Plug 'mattn/webapi-vim'             " for: gist-vim
Plug 'tpope/vim-repeat'             " for: surround.vim, unimpaired.vim
Plug 'google/vim-maktaba'           " for: vim-bazel
Plug 'tpope/vim-dispatch'           " for: gtest
Plug 'junegunn/vim-plug'
Plug 'ojroques/vim-oscyank'
Plug 'micchy326/lightline-lsp-progress'
Plug 'jamessan/vim-gnupg'
"--- Local plugins, if any
if filereadable('~/.vimrc.plugs')
  source ~/.vimrc.plugs
endif
packadd termdebug
Plug 'kmARC/fugitive-gerrit.vim'
Plug 'kmARC/asyncomplete-bazel'
Plug 'kmARC/vim-basler'
call plug#end() " }}}

"--- Vim-Plug --- {{{
function! s:plug_gx()
  let line = getline('.')
  let name = matchstr(line, "^Plug '[^']\\+/\\zs[^']\\+\\ze'")
  let uri  = get(get(g:plugs, name, {}), 'uri', '')
  if uri !~# 'github.com' 
    return
  endif
  let repo = matchstr(uri, '[^:/]*/'.name)
  let url  = 'https://github.com/'.repo
  call netrw#BrowseX(url, 0)
endfunction
" }}}
"
"--- Functions --- {{{
let s:sess = fnamemodify($MYVIMRC, ':h') . '/sessions/' . substitute($PWD, '\/', '%', 'g')

function! Project()
  if filereadable(s:sess)
    exec 'source' . fnameescape(s:sess)
  else
    exec 'Obsession ' . fnameescape(s:sess)
  endif
endfunction
command! Project call Project()

function! ProjectDelete()
  exec 'Obsession!'
  call delete(s:sess)
endfunction
command! ProjectDelete call ProjectDelete()

function! CheckProject()
  if argc() == 0 && &g:errorfile ==# 'errors.err' && filereadable(s:sess)
      call Project()
    endif
endfunction

function! DockerHelp(keyword)
  let url = 'https://docs.docker.com/engine/reference/builder/#' . tolower(a:keyword)
  call netrw#BrowseX(url, 0)
endfunction
command! -nargs=1 DockerHelp :call DockerHelp(<f-args>)

function! DevdocsHelp(keyword)
  let url = 'https://devdocs.io/#q=' . tolower(&l:filetype) . '+' . tolower(a:keyword)
  call netrw#BrowseX(url, 0)
endfunction
command! -nargs=1 DevdocsHelp :call DevdocsHelp(<f-args>)

function! KubeHelp(keyword)
  " This function opens the Kubernetes reference docs scrolled to the
  " kind / apiversion of the yaml described object the cursor currently
  " positioned at.
  "
  " l:keyword is unused; Unfortunately the reference docs doesn't have
  " hash-based html ids to navigate to exact keywords
  let l:kindLine = getline(search('^kind', 'bn'))
  let l:versionLine = getline(search('^apiVersion', 'bn'))
  if l:kindLine ==# '' ||  l:versionLine ==# ''
    echom 'Cannot find docs (no kind / apiVersion)'
    return
  endif
  let l:kind = substitute(l:kindLine, '\v.*kind:\s+([^ \t]+)', '\1', 'g')
  let l:path = substitute(l:versionLine, '\v.*apiVersion:\s+([^/ ]+)/([^/ ]+)\s*$', '\2-\1', 'g')
  " Checking if version is core
  if l:path == l:versionLine
    let l:path = substitute(l:versionLine, '\v.*apiVersion:\s+([^/ ]+)\s*$', '\1-core', 'g')
  endif
  let l:hash = '\\#' . tolower(l:kind) . '-' . l:path
  exec 'silent !xdg-open https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/'
        \ . l:hash
  exec 'redraw!'
endfunction
command! -nargs=1 KubeHelp :call KubeHelp(<f-args>)

function! s:SetupMavenMap()
  doautocmd MavenAutoDetect BufNewFile,BufReadPost

  if !maven#isBufferUnderMavenProject(bufnr('%'))
    return
  endif

  " " Execute testing
  " if !hasmapto("<Plug>MavenRunUnittest", "in")
  "   imap <buffer> <silent> <F5> <Plug>MavenRunUnittest
  "   nmap <buffer> <silent> <F5> <Plug>MavenRunUnittest
  " endif
  " " //~)

  " " Execute all of testing
  " if !hasmapto("<Plug>MavenRunUnittestAll", "in")
  "   imap <buffer> <silent> <C-F5> <Plug>MavenRunUnittestAll
  "   nmap <buffer> <silent> <C-F5> <Plug>MavenRunUnittestAll
  " endif
  " " //~)

  " Switch of unit test
  if !hasmapto('<Plug>MavenSwitchUnittestFile', 'in')
    imap <buffer> <silent> <F6> <Plug>MavenSwitchUnittestFile
    nmap <buffer> <silent> <F6> <Plug>MavenSwitchUnittestFile
  endif
  " //~)

  " Open for testing result of testing
  if !hasmapto('<Plug>MavenOpenTestResult', 'in')
    imap <buffer> <silent> <C-F6> <Plug>MavenOpenTestResult
    nmap <buffer> <silent> <C-F6> <Plug>MavenOpenTestResult
  endif
  " //~)
endfunction

function! ChangeColorScheme()
  if has('macunix') && system('defaults read -g AppleInterfaceStyle') =~? '^Dark'
\ || has('linux')   && system('gsettings get org.gnome.desktop.interface gtk-theme') =~? 'Dark'
    set background=dark
  else
    set background=light
  endif
  let g:lightline['colorscheme']=g:colors_name
  exec 'runtime! plugged/iceberg.vim/autoload/lightline/colorscheme/' . g:colors_name . '.vim'
  let _h = hlget("VertSplit", v:true)[0]
  let g:lightline#colorscheme#iceberg#palette.inactive.middle = [[_h->get("guifg", "NONE"), _h->get("guibg", "NONE"), _h->get("ctermfg", "NONE"), _h->get("ctermbg", "NONE")]]
  call lightline#enable()
endfunction
" }}}

" --- Default configurations --- {{{
set autoindent
set autoread
set backspace=indent,eol,start
set backup
set backupcopy=yes
set backupdir=~/.vim/vimbackup//
set breakindent
set cursorline
set diffopt+=vertical,algorithm:patience
set directory=~/.vim/vimswap//
set expandtab
set encoding=utf-8
set grepprg=rg\ --vimgrep
set fillchars+=vert:│,stlnc:\─
set formatoptions+=j
set grepprg=rg\ --vimgrep
set hidden
set history=10000
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set lazyredraw
set linebreak
set list
set listchars=trail:·,nbsp:·,tab:»\ ,
set mouse+=a
set noshowmode showcmd
set nowrap
set nrformats-=octal
set number relativenumber
set pastetoggle=<F12>
set scrolloff=3
set sessionoptions+=tabpages,globals,localoptions
set shiftwidth=2
set showbreak=↵
set signcolumn=number
set smartcase
set smarttab
set softtabstop=2
set splitbelow
set splitright
set switchbuf+=usetab
set termguicolors
set tabstop=2
set tagcase=match
set undodir=~/.vim/vimundo//
set undofile
set viminfo+=n~/.vim/misc/viminfo
set virtualedit=block,onemore
set wildcharm=<C-z>
set wildignore+=__pycache__,.mypy_cache,*.pyc " Python
set wildignore+=*.o,*.so,*.a                  " C/C++
set wildignore+=*.class                       " Java
set wildignore+=.direnv,build                 " Misc
set wildignore+=*/bazel-*/*                   " Bazel
set wildignorecase
set wildmenu
set wildmode=list:full
scriptencoding utf-8
" }}}

"--- Plugin configurations --- {{{
function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    " setlocal signcolumn=yes
    if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> <leader>ld <plug>(lsp-definition)
    nmap <buffer> <leader>lD <plug>(lsp-declaration)
    nmap <buffer> <leader>ls <plug>(lsp-document-symbol-search)
    nmap <buffer> <leader>lS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> <leader>lr <plug>(lsp-references)
    nmap <buffer> <leader>li <plug>(lsp-implementation)
    nmap <buffer> <leader>lt <plug>(lsp-type-definition)
    nmap <buffer> <leader>lR <plug>(lsp-rename)
    nmap <buffer> <leader>lK <plug>(lsp-hover)
    nmap <buffer> [g <plug>(lsp-previous-diagnostic)
    nmap <buffer> ]g <plug>(lsp-next-diagnostic)
    nmap <buffer> <leader>lA :LspCodeAction<CR>
    nmap <buffer> <leader>lo :LspCodeAction source.organizeImports<CR>
    nmap <buffer> <leader>lp :LspPeekDefinition<CR>
    inoremap <buffer> <expr><c-f> lsp#scroll(+4)
    inoremap <buffer> <expr><c-d> lsp#scroll(-4)

    " let g:lsp_format_sync_timeout = 1000
    " autocmd! BufWritePre *.rs,*.go call execute('LspDocumentFormatSync')
    "
    nmap <buffer> <F4> :LspNextDiagnostic<CR>:LspCodeAction<CR>

    " setlocal foldmethod=expr
    "   \ foldexpr=lsp#ui#vim#folding#foldexpr()
    "   \ foldtext=lsp#ui#vim#folding#foldtext()
   
    " refer to doc to add more commands
endfunction

let s:dir_misc = expand('~/.vim/misc')
let g:UltiSnipsEditSplit = 'vertical'
let g:UltiSnipsExpandTrigger = '<c-j>'
let g:UltiSnipsListSnippets = '<c-h>'
let g:UltiSnipsSnippetsDir = '~/.vim/UltiSnips'
let g:ale_fix_on_save = 1
let g:ale_fixers = {} " {{{
let g:ale_fixers['bzl'] = ['buildifier']
let g:ale_fixers['cpp'] = ['clangtidy', 'clang-format']
let g:ale_fixers['java'] = ['uncrustify']
let g:ale_fixers['json'] = ['jq']
let g:ale_fixers['python'] = ['black', 'isort']
let g:ale_fixers['rust'] = ['rustfmt']
let g:ale_fixers['starlark'] = ['buildifier']
let g:ale_fixers['xml'] = ['xmllint']
" }}}
let g:ale_linters = {} " {{{
let g:ale_linters['json'] = 'all'
let g:ale_linters['mail'] = ['languagetool']
let g:ale_linters['starlark'] = ['buildifier']
let g:ale_linters['text'] = ['languagetool']
let g:ale_linters['cpp'] = ['cc']
" }}}
let g:ale_linters_ignore = ['clangtidy', 'cc']
let g:ale_languagetool_options = '--language en-US'
let g:ale_sh_shellcheck_options = '--external-sources'
" let g:ale_python_pylint_change_directory = 0
" let g:ale_lint_delay = 2000
" let g:ale_disable_lsp = 1
" let g:ale_virtualtext_delay = 2000
" let g:ale_virtualtext_cursor = 'current'
let g:ale_awk_gawk_options = '--lint=no-ext'
let g:ale_c_parse_compile_commands = 0
let g:ale_cpp_cc_options = environ()->get('CXXFLAGS', '')
let g:ale_c_uncrustify_options = '-c ' . findfile('uncrustify.cfg', ';')
let g:cpp_attributes_highlight = 1
let g:cpp_member_highlight = 1
let g:cpp_simple_highlight = 1
let g:delimitMate_expand_cr = 2
let g:direnv_auto = 0
let g:fzf_buffers_jump = 1
let g:fzf_colors =
    \ { 'fg':      ['fg', 'Comment'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Error'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Comment'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'preview-fg': ['fg', 'Normal'],
      \ 'header':  ['fg', 'Comment'] }
let g:gist_open_browser_after_post = 1
let g:gist_token_file = s:dir_misc . '/.gist-vim'
let g:gtest#highlight_failing_tests = 1
let g:gutentags_cache_dir = s:dir_misc
let g:gutentags_generate_on_new = 0
let g:jsdoc_enable_es6 = 1
let g:lightline_tagbar#flags = 'f'
let g:lsp_code_action_ui = 'float'
let g:lsp_document_symbol_detail = 1
let g:lsp_experimental_workspace_folders = 1
let g:lsp_float_max_width = 150
let g:lsp_inlay_hints_enabled = 1
let g:lsp_semantic_enabled = 1
let g:lsp_preview_fixup_conceal = 1
" capabilities required for document_symbol_detail
let g:lsp_settings = {
      \ 'capabilities': {
      \     'textDocument': {
      \         'documentSymbol': {
      \             'hierarchicalDocumentSymbolSupport': v:true,
      \         },
      \     },
      \ },
      \ 'pylsp-all': {
      \    'workspace_config': {
      \      'pylsp': {
      \        'plugins': {
      \          'pycodestyle': { 'enabled': v:false },
      \          'pyflakes': { 'enabled': v:false },
      \         }
      \      }
      \    }
      \  },
      \ 'bash-language-server': {
      \    'workspace_config': {
      \      'bashIde': {
      \        'explainshellEndpoint': 'http://localhost:5000'
      \      }
      \    }
      \ },
      \}
let g:lsp_work_done_progress_enabled = 1
let g:lsp_use_native_client = 1
let g:maven_keymaps = 1
let g:maven_auto_set_path = 0
let g:netrw_keepdir = 0
let g:netrw_banner = 1
let g:netrw_browse_split = 4
let g:netrw_home = s:dir_misc
let g:netrw_liststyle = 0
let g:netrw_winsize = -40
let g:slime_paste_file = tempname()
let g:sh_fold_enabled = 7
let g:taboo_renamed_tab_format =' %N %l%m '
let g:taboo_tab_format = ' %N %f%m '
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
let g:tagbar_type_bzl = {
  \   'ctagstype': 'Bazel',
  \   'kinds': [
  \     'a:aliases',
  \     'b:binaries',
  \     'l:libraries',
  \     'o:other:1',
  \     't:tests',
  \     'c:classes',
  \     'f:functions',
  \     'm:class members',
  \     'v:variables',
  \     'i:modules',
  \   ],
  \ }
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_frontmatter = 1
let g:xml_syntax_folding = 1
let test#strategy = 'vimux'
" }}}

"--- Integrations --- {{{
" Wayland {{{
if has_key(environ(), 'WAYLAND_DISPLAY')
  " Fix copy-paste
  xnoremap "+y y:call system("wl-copy",           @")<cr>
  xnoremap "*y y:call system("wl-copy --primary", @")<cr>
  nnoremap "+p :let @+=substitute(system("wl-paste --no-newline"),           '<C-v><C-m>', '', 'g')<cr>"+p
  nnoremap "*p :let @*=substitute(system("wl-paste --no-newline --primary"), '<C-v><C-m>', '', 'g')<cr>"*p
end
" }}}

" Tmux {{{
if has_key(environ(), 'TMUX')
  "Set tmux-compatible title
  set t_ts=]2;
  set t_fs=\\
  "Configure slime to use tmux
  let g:slime_target = 'tmux'
endif
" }}}
" }}}

"--- Mappings ---- {{{
cmap w!!                   w !sudo tee > /dev/null %

nnoremap <expr> <C-p>      g:FugitiveIsGitDir() ? ':GFiles<CR>' : ':Files<CR>'

nnoremap <expr> <F7>       expand('%')=='' ? ':NERDTree<CR>' : ':NERDTreeFind<CR>'
nnoremap <F8>              :TagbarToggle<CR>
nnoremap <F9>              :lclose<CR>:cclose<CR>:pclose<CR>

nnoremap <space>           :ls<CR>:sbuffer 
nnoremap <leader><space>   :edit **/*.<C-r>=expand('%:e')<return><C-z><C-p><C-u>edit **/*

" FZF files with the same extension as current
nnoremap <leader>fp        :call fzf#vim#files(
  \   0, {'options':'--query=' . expand('%:e') . '$\ '}
  \ )<CR>
" FZF grep only in file content, not in file name
nnoremap <leader>fg        :call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case ""',
  \   1, {'options':'--delimiter : --nth 4..'}
  \ )<CR>
" FZF grep current word only in file content
nnoremap <leader>fG        :Rg <C-r><C-w><CR>
vnoremap <leader>t,        :Tabularize /^[^,]*,/l0l1<CR>
vnoremap <leader>t:        :Tabularize /^[^:]*:/l0l1<CR>
vnoremap <leader>t=        :Tabularize /^[^=]*\zs/l1c1l1<CR>
vnoremap <leader>t<Space>  :Tabularize /\S\+/l1l0<CR>
vnoremap <leader>t<bar>    :Tabularize /<bar>\+/l1c1<CR>

nnoremap <leader>K         :DevdocsHelp <C-r><C-w><CR>

nnoremap <leader>1         1gt
nnoremap <leader>2         2gt
nnoremap <leader>3         3gt
nnoremap <leader>4         4gt
nnoremap <leader>5         5gt
nnoremap <leader>6         6gt
nnoremap <leader>7         7gt
nnoremap <leader>8         8gt
nnoremap <leader>9         9gt
nnoremap <leader>0         0gt

nnoremap j                 gj
nnoremap k                 gk
nnoremap gj                j
nnoremap gk                k

" nnoremap <leader>aa        :!xdg-open https://docs.ansible.com/ansible/latest/list_of_all_modules.html<CR>
" nnoremap <leader>am        :!xdg-open https://docs.ansible.com/ansible/latest/<C-R><C-W>_module.html\#options<CR>
" nnoremap <leader>as        :!xdg-open https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html?highlight=<C-R><C-W><CR>

" }}}

"--- Autocommands --- {{{
augroup filetypes
  autocmd!

  autocmd FileType cpp
    \   nnoremap <silent> t<C-n> :GTestRunUnderCursor<CR>
    \ | nnoremap <silent> t<C-f> :GTestRun<CR>

  autocmd FileType css,less,scss
    \   setlocal keywordprg=:DevdocsHelp
    \ | autocmd BufWritePost <buffer> normal! mC

  autocmd FileType dockerfile
    \   setlocal keywordprg=:DockerHelp
    \ | autocmd BufWritePost <buffer> normal! mD

  autocmd FileType git
    \   setlocal foldmethod=syntax

  autocmd FileType help
    \   autocmd BufWinEnter <buffer>
    \       wincmd L
    \     | 80 wincmd |
    \     | setlocal winfixwidth

  autocmd FileType html 
    \   autocmd BufWritePost <buffer> normal! mH

  autocmd FileType java
    \   setlocal softtabstop=4 tabstop=4 shiftwidth=4
    \ | setlocal foldmethod=syntax foldlevel=1
    \ | nnoremap gP :exec "vsplit " . findfile('pom.xml', ".;")<CR><ESC>
    \ | nnoremap gC :exec "vsplit " . findfile(expand("%:r")->split("/")[-1] . ".class", "**")<CR><ESC>
    \ | if maven#isBufferUnderMavenProject(bufnr("%"))
    \ |   let b:mvn_exec_cmd =  "Mvn! compile exec:java -Dexec.mainClass=" . maven#getJavaPackageOfBuffer('%') . '.' . expand('%:t:r')
    \ |   command! MvnExec exec b:mvn_exec_cmd
    \ | endif
    \ | call s:SetupMavenMap()
    \ | autocmd BufWritePost <buffer> normal! mJ<ESC>

  autocmd FileType javascript*,typescript*
    \   setlocal keywordprg=:DevdocsHelp
    \ | setlocal include=from
    \ | setlocal define=export.\\{-\\}\\(interface\\\|function\\\|const\\\|type\\\|class\\\|var\\)
    \ | autocmd BufWritePost <buffer> normal! mJ

  autocmd FileType mail 
    \   setlocal formatoptions+=watqc
    \ | setlocal nojoinspaces
    \ | setlocal spell
    \ | match ErrorMsg '\s\+$'

  autocmd FileType markdown
    \   nnoremap <buffer> <F6> :LivedownToggle<CR>
    \ | nnoremap <buffer> <F8> :Toc<CR><C-w>L<C-w>50<bar>:setlocal winfixwidth<CR>
    \ | setlocal spell
    \ | setlocal softtabstop=4 tabstop=4 shiftwidth=4
    \ | setlocal textwidth=100 formatprg=par\ -jw100
    \ | autocmd BufWritePost <buffer> normal! mM

  autocmd FileType netrw
    \   nnoremap <buffer> <c-l> <c-w>l

  autocmd FileType plaintex,text
    \   setlocal textwidth=100 formatprg=par\ -jw100
    \ | autocmd BufWritePost <buffer> normal! mT

  autocmd FileType python 
    \   setlocal keywordprg=pydoc
    \ | setlocal softtabstop=4 tabstop=4 shiftwidth=4
    \ | autocmd BufWritePost <buffer> normal! mP

  autocmd FileType terraform 
    \   setlocal commentstring=#%s
    \ | autocmd BufWritePost <buffer> normal! mT

  autocmd FileType todo
    \   set nospell
    \ | hi TodoProject cterm=bold ctermfg=5
    \ | hi TodoContext cterm=bold ctermfg=2
    \ | hi TodoPriorityA ctermfg=1
    \ | hi TodoPriorityB ctermfg=3
    \ | hi TodoPriorityC ctermfg=6

  autocmd FileType vim
    \   setlocal keywordprg=:help
    \ | nnoremap <buffer> <silent> gx :call <sid>plug_gx()<cr>
    \ | autocmd BufWritePost <buffer> normal! mV

  autocmd FileType yaml.ansible
    \   setlocal keywordprg=:DevdocsHelp
    \ | autocmd BufWritePost <buffer> normal! mA

  autocmd FileType yaml.kubernetes,*gotexttmpl
    \   setlocal keywordprg=:KubeHelp
    \ | autocmd BufWritePost <buffer> normal! mK

  autocmd FileType xml 
    \   setlocal foldmethod=syntax
    \ | silent! %foldopen!
    \ | autocmd BufWritePost <buffer> normal! mX

augroup END

augroup autocommands
  autocmd!

  autocmd VimEnter 
    \   call CheckProject()

  " autocmd VimEnter *
  "   \   if ! &l:diff && expand('%') == ''
  "   \ |   :NERDTree
  "   \ |   execute "normal \<c-w>p"
  "   \ | endif

  autocmd BufNewFile *
    \   let s:skel = expand('~/.vim/skeleton/skeleton.') . expand('%:e')
    \ | if filereadable(s:skel) && ! &l:readonly
    \ |   exec '0r ' . s:skel
    \ | endif

  autocmd BufReadPost *
    \   if test#exists() 
    \ |   nnoremap <buffer> t<C-n> :TestNearest<CR>
    \ |   nnoremap <buffer> t<C-f> :TestFile<CR>
    \ |   nnoremap <buffer> t<C-s> :TestSuite<CR>
    \ |   nnoremap <buffer> t<C-l> :TestLast<CR>
    \ |   nnoremap <buffer> t<C-g> :TestVisit<CR>
    \ | endif

  autocmd BufEnter NERD_tree_* nnoremap <buffer> <F7> :q<CR>

  autocmd BufWritePost ~/Documents/Home/index.md
    \   silent !pandoc --output ~/Documents/Home/index.html
    \                  --css github-pandoc.css --standalone %

  autocmd WinEnter * 
    \   if &l:buftype == "" && &l:filetype != "netrw"
    \ |   setlocal nu rnu
    \ | endif
    \ | setlocal cursorline

  autocmd WinLeave * 
    \   if &l:buftype == "" && &l:filetype != "netrw" 
    \ |   setlocal nu nornu
    \ | endif
    \ | setlocal nocursorline

  autocmd User TermdebugStartPost 
    \   call TermDebugSendCommand('vim-dashboard-profile')

  autocmd User lsp_buffer_enabled
    \   call s:on_lsp_buffer_enabled()

  autocmd User asyncomplete_setup
    \   call asyncomplete#register_source(
    \          asyncomplete#sources#file#get_source_options({
    \            'name': 'file',
    \            'allowlist': ['*'],
    \            'priority': 10,
    \            'completor': function('asyncomplete#sources#file#completor')
    \          })
    \        )
    \ | call asyncomplete#register_source(
    \          asyncomplete#sources#ultisnips#get_source_options({
    \            'name': 'ultisnips',
    \            'allowlist': ['*'],
    \            'completor': function('asyncomplete#sources#ultisnips#completor'),
    \          })
    \        )

  autocmd SigUSR1 * 
    \   call ChangeColorScheme()

  autocmd ColorScheme *
    \   call ChangeColorScheme()
    \ | hi VertSplit                       guibg=NONE
    \ | hi LineNr                          guibg=NONE
    \ | hi SignColumn                      guibg=NONE
    \ | hi link javaFunction Text
    \ | hi link javaString   Special
    \ | hi ALEVirtualTextError             ctermfg=1 gui=italic cterm=italic
    \ | hi ALEVirtualTextWarning           ctermfg=3 gui=italic cterm=italic
    \ | hi ALEVirtualTextInfo              ctermfg=6 gui=italic cterm=italic
    \ | call hlset([hlget("ALEWarningSign", v:true)[0]
    \              ->extend(#{ name: "ALEInfoSign" })
    \              ->extend(#{ guifg:   hlget("DiagnosticInfo", v:true)[0]["guifg"] })
    \              ->extend(#{ ctermfg: hlget("DiagnosticInfo", v:true)[0]["ctermfg"] })
    \              ])
    \ | call hlset([hlget("CursorLineNr", v:true)[0]
    \              ->extend(#{ guibg:   hlget("CursorLine", v:true)[0]["guibg"] })
    \              ->extend(#{ ctermbg: hlget("CursorLine", v:true)[0]["ctermbg"] })
    \              ])

  autocmd TextYankPost * if v:event.operator is 'y' && environ()->has_key("SSH_CLIENT") | execute 'OSCYankRegister ""' | endif

  autocmd BufReadPost *.bzl 
    \   setlocal keywordprg=:DevdocsHelp
augroup END
" }}}

"--- Look & Feel ---- {{{
let g:tagbar_status_func = 'TagbarStatusFunc'
function! TagbarStatusFunc(current, sort, fname, ...) abort
  return lightline#statusline(0)
endfunction

let g:lightline = {
      \   'active': {
      \     'left': [ [ 'preview', 'mode', 'paste' ],
      \               [ 'gitbranch', 'readonly', 'filename', 'modified' ],
      \               [ 'tagbar'] ],
      \     'right': [ ['percent', 'lineinfo'],
      \                ['filetype'],
      \                ['lsp_status'] ],
      \   },
      \   'inactive': {
      \     'left': [ [],
      \               [ 'absolutepath', 'modified' ],
      \               [] ],
      \     'right': [ ],
      \   },
      \   'component': { 'filetype' : '%<%{&ft!=#""?&ft:"no ft"}', 'preview': '%{&previewwindow?"PREVIEW":""}'},
      \   'component_function': {
      \     'gitbranch': 'FugitiveStatusline',
      \     'tagbar': 'lightline_tagbar#component',
      \     'lsp_status': 'lightline_lsp_progress#progress',
      \     'codeium': 'codeium#GetStatusString',
      \     'mode': 'LightlineMode',
      \     'filename': 'LightlineFilename',
      \   },
      \   'component_visible_condition': {
      \     'preview': '&previewwindow',
      \   },
      \ }

function! LightlineMode()
  let fname = expand('%:t')
  return fname =~# '^__Tagbar__' ? 'Tagbar' :
        \ fname =~# 'NERD_tree' ? 'NERDTree' :
        \ winwidth(0) > 60 ? lightline#mode() : ''
endfunction

function! LightlineFilename()
  let fname = expand('%:t')
  return fname =~# '^__Tagbar__\|__Gundo\|NERD_tree' ? '' :
        \ (LightlineReadonly() !=# '' ? LightlineReadonly() . ' ' : '') .
        \ (fname !=# '' ? fname : '[No Name]') .
        \ (LightlineModified() !=# '' ? ' ' . LightlineModified() : '')
endfunction

function! LightlineModified()
  return &ft ==# 'help' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! LightlineReadonly()
  return &ft !~? 'help' && &readonly ? 'RO' : ''
endfunction


silent colorscheme iceberg

" :help tmux-integration
if !has('gui_running') && &term =~# '^\%(screen\|tmux\|alacritty\)'
  " Better mouse support, see  :help 'ttymouse'
  set ttymouse=sgr

  " Enable true colors, see  :help xterm-true-color
  let &termguicolors = v:true
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

  " Enable bracketed paste mode, see  :help xterm-bracketed-paste
  let &t_BE = "\<Esc>[?2004h"
  let &t_BD = "\<Esc>[?2004l"
  let &t_PS = "\<Esc>[200~"
  let &t_PE = "\<Esc>[201~"

  " Enable focus event tracking, see  :help xterm-focus-event
  let &t_fe = "\<Esc>[?1004h"
  let &t_fd = "\<Esc>[?1004l"
  execute "set <FocusGained>=\<Esc>[I"
  execute "set <FocusLost>=\<Esc>[O"

  " Enable modified arrow keys, see  :help arrow_modifiers
  execute "silent! set <xUp>=\<Esc>[@;*A"
  execute "silent! set <xDown>=\<Esc>[@;*B"
  execute "silent! set <xRight>=\<Esc>[@;*C"
  execute "silent! set <xLeft>=\<Esc>[@;*D"
endif
" }}}

" --- Debugging --- {{{
if $LOG == 'verbose'
  " - asyncomplete -
  let g:asyncomplete_log_file = expand('/tmp/asyncomplete-$USER.log')

  " - gutentags -
  let g:gutentags_define_advanced_commands = 1
  let g:gutentags_trace = 1

  " - lsp -
  let g:lsp_log_verbose = 1
  let g:lsp_log_file = expand('/tmp/vim-lsp-$USER.log')


endif
" }}}

" {{{ --- Startup ---
if ! v:vim_did_enter
  call ChangeColorScheme()
endif

" Fix delimitMate - endwise integration
" see: https://github.com/tpope/vim-endwise/issues/133
if empty(maparg('<CR>', 'i'))
  imap <CR> <Plug>delimitMateCR
endif

silent! source ~/.vimrc.local

set modeline
set exrc
set secure

" vim: fdm=marker fdl=0 fen
