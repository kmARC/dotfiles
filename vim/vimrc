let g:polyglot_disabled = ['markdown']

call plug#begin('~/.vim/plugged')
"--- Look&Feel ---
Plug 'itchyny/lightline.vim'
Plug 'jan-warchol/selenized'        , {'rtp': 'editors/vim'}
"--- Tools ---
Plug 'direnv/direnv.vim'
Plug 'gcmt/taboo.vim'
Plug 'junegunn/fzf.vim'
Plug 'tpope/vim-obsession'
Plug 'tpope/vim-unimpaired'
"--- Editing ---
Plug 'Raimondi/delimitMate'
Plug 'godlygeek/tabular'            , {'on': 'Tabularize'}
Plug 'michaeljsmith/vim-indent-object'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-abolish'
"--- Git ---
Plug 'mattn/gist-vim'
Plug 'shumphrey/fugitive-gitlab.vim'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-rhubarb'
"--- TMUX ---
Plug 'christoomey/vim-tmux-navigator'
Plug 'jpalardy/vim-slime'
Plug 'tmux-plugins/vim-tmux'        , {'for': 'tmux'}
"--- Programming ---
Plug 'AndrewRadev/splitjoin.vim'
Plug 'SirVer/ultisnips'
Plug 'andymass/vim-matchup'
Plug 'benmills/vimux'
Plug 'editorconfig/editorconfig-vim'
Plug 'honza/vim-snippets'
Plug 'janko/vim-test'
Plug 'ludovicchabant/vim-gutentags'
Plug 'majutsushi/tagbar'            , {'on': ['TagbarToggle']}
Plug 'sheerun/vim-polyglot'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-endwise'
Plug 'w0rp/ale'
"--- Markdown, Wiki, Todo ---
Plug 'freitass/todo.txt-vim'        , {'for': 'todo'}
Plug 'plasticboy/vim-markdown'      , {'for': 'markdown'}
Plug 'shime/vim-livedown'           , {'for': 'markdown'}
"--- HTML ---
Plug 'mattn/emmet-vim'              , {'for': ['html', '*jsx', 'xml']}
Plug 'othree/html5.vim'             , {'for': ['html', '*jsx', 'xml']}
"--- CSS ---
Plug 'groenewege/vim-less'          , {'for': 'css'}
"--- JavaScript ---
Plug 'heavenshell/vim-jsdoc'        , {'for': 'javascript*'}
Plug 'moll/vim-node'                , {'for': 'javascript*'}
Plug 'othree/yajs.vim'              , {'for': 'javascript*'}
Plug 'pangloss/vim-javascript'      , {'for': 'javascript*'}
"--- React ---
Plug 'mxw/vim-jsx'                  , {'for': '*jsx'}
"--- TypeScript ---
Plug 'leafgarland/typescript-vim'   , {'for': 'typescript*'}
"--- DevOps ---
Plug 'andrewstuart/vim-kubernetes'
Plug 'hashivim/vim-terraform'       , {'for': 'terraform'}
" Plug 'pearofducks/ansible-vim'
"--- Dependencies ---
Plug 'mattn/webapi-vim'             " for: gist-vim
Plug 'tpope/vim-repeat'
"--- TESTING
Plug 'prabirshrestha/vim-lsp'
Plug 'mattn/vim-lsp-settings'
Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-lsp.vim'
Plug 'prabirshrestha/asyncomplete-file.vim'
Plug 'prabirshrestha/asyncomplete-ultisnips.vim'
let g:asyncomplete_popup_delay = 300
call plug#end()

filetype plugin indent on

let s:dir_misc = expand('~/.vim/misc')

set autoindent
set backspace=indent,eol,start
set backup
set backupcopy=yes
set backupdir=~/.vim/vimbackup//
set breakindent
set cursorline
set diffopt+=vertical,algorithm:patience
set directory=~/.vim/vimswap//
set expandtab
set fillchars+=vert:â”‚
set hidden
set hlsearch
set ignorecase
set incsearch
set laststatus=2
set linebreak
set list
set listchars=trail:Â·,nbsp:Â·,tab:Â»\ ,
set mouse+=a
set noshowmode showcmd
set nowrap
set number relativenumber
set pastetoggle=<F12>
set scrolloff=3
set sessionoptions+=tabpages,globals,localoptions
set shiftwidth=2
set showbreak=â†µ
set signcolumn=number
set smartcase
set smarttab
set softtabstop=2
set splitbelow
set splitright
set switchbuf+=usetab
set tabstop=2
set tagcase=match
set ttymouse=xterm2
set undodir=~/.vim/vimundo//
set undofile
set viminfo+=n~/.vim/misc/viminfo
set virtualedit=block,onemore
set wildcharm=<C-z>
set wildignore+=__pycache__,.mypy_cache,*.pyc " Python
set wildignore+=*.o,*.so,*.a                  " C/C++
set wildignore+=*.class                       " Java
set wildignore+=.direnv,build                 " Misc
set wildignorecase
set wildmenu
set wildmode=list:full

"--- Fix wayland copy-paste
if has_key(environ(), "WAYLAND_DISPLAY")
  xnoremap "+y y:call system("wl-copy",           @")<cr>
  xnoremap "*y y:call system("wl-copy --primary", @")<cr>
  nnoremap "+p :let @+=substitute(system("wl-paste --no-newline"),           '<C-v><C-m>', '', 'g')<cr>"+p
  nnoremap "*p :let @*=substitute(system("wl-paste --no-newline --primary"), '<C-v><C-m>', '', 'g')<cr>"*p
end

"--- TMUX integration
if has_key(environ(), "TMUX")
  " Set tmux-compatible title
  set t_ts=]2;
  set t_fs=\\

  let g:slime_target = "tmux"
else
  let g:slime_target = "vimterminal"
endif

"--- Look & Feel ----
syntax on
set t_Co=16

augroup theme
  autocmd!
  autocmd ColorScheme * highlight VertSplit ctermfg=8 ctermbg=NONE guibg=NONE
                     \| highlight LineNr              ctermbg=NONE guibg=NONE ctermfg=8
                     \| highlight CursorLine          ctermbg=NONE guibg=NONE
                     \| highlight CursorLineNr        ctermbg=NONE
                     \| highlight Folded              ctermbg=NONE            ctermfg=8 cterm=bold
                     \| highlight TabLineSel          cterm=NONE ctermbg=NONE ctermfg=15
                     \| highlight TabLine             cterm=NONE ctermbg=0 ctermfg=7
                     \| highlight TabLineFill         cterm=NONE ctermbg=0 ctermfg=7
                     \| highlight! link Directory Identifier
                     \| let g:lightline.colorscheme = g:colors_name . '_' . &g:background
                     \| call lightline#enable()
augroup END

set background=light
let g:lightline = {
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
      \ },
      \ 'component_function': {
      \   'gitbranch': 'FugitiveHead'
      \ },
      \ }
colorscheme selenized

"--- Mappings ----
cmap w!!                   w !sudo tee > /dev/null %

nnoremap <C-p>             :Files<CR>

nnoremap <F7>              :Lexplore<CR>
nnoremap <F8>              :TagbarToggle<CR>
nnoremap <F9>              :lclose<CR>:cclose<CR>:pclose<CR>

nnoremap <space>           :ls<CR>:sbuffer 
nnoremap <leader><space>   :edit **/*.<C-r>=expand('%:e')<return><C-z><C-p><C-u>edit **/*

nnoremap <leader>fp        :call fzf#vim#files(
  \   0, {'options':'--query=' . expand('%:e') . '$\ '}
  \ )<CR> " FZF files with the same extension as current
nnoremap <leader>fg        :call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case ""',
  \   1, {'options':'--delimiter : --nth 4..'}
  \ )<CR> " FZF grep only in file content, not in file name
nnoremap <leader>fG        :call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case ""',
  \   1, {'options':'--delimiter : --nth 4.. --exact --query=<C-r><C-w> +i'}
  \ )<CR> " FZF grep current word only in file content

vnoremap <leader>t,        :Tabularize /^[^,]*,/l0l1<CR>
vnoremap <leader>t:        :Tabularize /^[^:]*:/l0l1<CR>
vnoremap <leader>t=        :Tabularize /^[^=]*\zs/l1c1l1<CR>
vnoremap <leader>t<Space>  :Tabularize /\S\+/l1l0<CR>
vnoremap <leader>t<bar>    :Tabularize /<bar>\+/l1c1<CR>

nnoremap <leader>1         1gt
nnoremap <leader>2         2gt
nnoremap <leader>3         3gt
nnoremap <leader>4         4gt
nnoremap <leader>5         5gt
nnoremap <leader>6         6gt
nnoremap <leader>7         7gt
nnoremap <leader>8         8gt
nnoremap <leader>9         9gt
nnoremap <leader>0         0gt

nnoremap j                 gj
nnoremap k                 gk
nnoremap gj                j
nnoremap gk                k

nnoremap <leader>aa        :!xdg-open https://docs.ansible.com/ansible/latest/list_of_all_modules.html<CR>
nnoremap <leader>am        :!xdg-open https://docs.ansible.com/ansible/latest/<C-R><C-W>_module.html\#options<CR>
nnoremap <leader>as        :!xdg-open https://docs.ansible.com/ansible/latest/reference_appendices/playbooks_keywords.html?highlight=<C-R><C-W><CR>

nnoremap <silent> t<C-n>   :TestNearest<CR>
nnoremap <silent> t<C-f>   :TestFile<CR>
nnoremap <silent> t<C-s>   :TestSuite<CR>
nnoremap <silent> t<C-l>   :TestLast<CR>
nnoremap <silent> t<C-g>   :TestVisit<CR>

"--- Autocommands ---
augroup vimrc
  autocmd!
  "----- keywordprg
  autocmd FileType vim                            setlocal keywordprg=:help
  autocmd FileType javascript*,typescript*        setlocal keywordprg=:DevdocsHelp
  autocmd FileType css,less,scss                  setlocal keywordprg=:DevdocsHelp
  autocmd FileType yaml.ansible                   setlocal keywordprg=:DevdocsHelp
  autocmd FileType python                         setlocal keywordprg=pydoc
  autocmd FileType dockerfile                     setlocal keywordprg=:DockerHelp
  autocmd FileType *gotexttmpl,yaml.kubernetes    setlocal keywordprg=:KubeHelp
  "----- mappings
  autocmd FileType markdown                       nnoremap <buffer> <F6> :LivedownToggle<CR>
  autocmd FileType markdown                       nnoremap <buffer> <F8> :Toc<CR><C-w>L<C-w>50<bar>:setlocal winfixwidth<CR>
  autocmd FileType netrw                          nnoremap <buffer> <c-l> <c-w>l
  "----- formatting
  autocmd FileType mail                           setlocal formatoptions+=watqc nojoinspaces | match ErrorMsg '\s\+$'
  autocmd FileType markdown                       setlocal softtabstop=4 tabstop=4 shiftwidth=4
  autocmd FileType python                         setlocal softtabstop=4 tabstop=4 shiftwidth=4
  autocmd FileType markdown,plaintex,text         setlocal textwidth=100 formatprg=par\ -jw100
  autocmd FileType terraform                      setlocal commentstring=#%s
  autocmd FileType xml                            setlocal foldmethod=syntax | %foldopen!
  "----- TESTING
  au User asyncomplete_setup 
    \  call asyncomplete#register_source(asyncomplete#sources#file#get_source_options({
      \ 'name': 'file',
      \ 'allowlist': ['*'],
      \ 'priority': 10,
      \ 'completor': function('asyncomplete#sources#file#completor')
    \ })) |
    \ call asyncomplete#register_source(asyncomplete#sources#ultisnips#get_source_options({
      \ 'name': 'ultisnips',
      \ 'allowlist': ['*'],
      \ 'completor': function('asyncomplete#sources#ultisnips#completor'),
    \ }))
  "----- filetypes
  autocmd BufRead,BufNewFile Vagrantfile          setlocal filetype=ruby
  autocmd BufRead,BufNewFile *.tsx                setlocal filetype=typescript.jsx
  "----- marks
  autocmd BufWritePost *.css,*.less,*.scss        normal! mC
  autocmd BufWritePost *.html                     normal! mH
  autocmd BufWritePost *.js,*.jsx,*.ts,*.tsx      normal! mJ
  autocmd BufWritePost *.md                       normal! mM
  autocmd BufWritePost *.py                       normal! mP
  autocmd BufWritePost *.sh                       normal! mS
  autocmd BufWritePost *.yml                      normal! mY
  autocmd BufWritePost *.vim,vimrc                normal! mV
  "----- buffer/window opts
  autocmd WinEnter *                              if &l:buftype == "" && &l:filetype != "netrw" | setlocal nu   rnu
  autocmd WinLeave *                              if &l:buftype == "" && &l:filetype != "netrw" | setlocal nu nornu
  autocmd FileType help                           wincmd L | 80 wincmd | | setlocal winfixwidth
  "----- startup
  autocmd VimEnter * call CheckProject()
  "----- include/define
  autocmd FileType javascript*,typescript*        setlocal include=from
                                              \ | setlocal define=export.\\{-\\}\\(interface\\\|function\\\|const\\\|type\\\|class\\\|var\\)
  "----- misc
  autocmd BufWritePost ~/Documents/Home/index.md
          \ silent !pandoc --output ~/Documents/Home/index.html
                         \ --css github-pandoc.css --standalone %
  "----- skeleton
  autocmd BufNewFile *.sh                         0r ~/.vim/skeleton/skeleton.sh
  "----- test
  autocmd BufWrite *                              if test#exists() | TestFile
augroup END


"--- Functions --- {{{
let s:sess = fnamemodify($MYVIMRC, ":h") . '/sessions/' . substitute($PWD, '\/', '%', 'g')

function! Project()
  if filereadable(s:sess)
    exec "source" . fnameescape(s:sess)
  else
    exec "Obsession " . fnameescape(s:sess)
  endif
endfunction
command! Project call Project()

function! ProjectDelete()
  exec "Obsession!"
  call delete(s:sess)
endfunction
command! ProjectDelete call ProjectDelete()

function! CheckProject()
  if argc() == 0 && &g:errorfile == 'errors.err' && filereadable(s:sess)
      call Project()
    endif
endfunction

function! DockerHelp(keyword)
  exec "silent !xdg-open https://docs.docker.com/engine/reference/builder/\\#"
        \ . tolower(a:keyword)
  exec 'redraw!'
endfunction
command! -nargs=1 DockerHelp :call DockerHelp(<f-args>)

function! DevdocsHelp(keyword)
  exec "silent !xdg-open https://devdocs.io/\\#q="
        \ . tolower(&l:filetype) . "+" . tolower(a:keyword)
  exec 'redraw!'
endfunction
command! -nargs=1 DevdocsHelp :call DevdocsHelp(<f-args>)

function! KubeHelp(keyword)
  " This function opens the Kubernetes reference docs scrolled to the
  " kind / apiversion of the yaml described object the cursor currently
  " positioned at.
  "
  " l:keyword is unused; Unfortunately the reference docs doesn't have
  " hash-based html ids to navigate to exact keywords
  let l:kindLine = getline(search('^kind', 'bn'))
  let l:versionLine = getline(search('^apiVersion', 'bn'))
  if l:kindLine == '' ||  l:versionLine == ''
    echom 'Cannot find docs (no kind / apiVersion)'
    return
  endif
  let l:kind = substitute(l:kindLine, '\v.*kind:\s+([^ \t]+)', '\1', 'g')
  let l:path = substitute(l:versionLine, '\v.*apiVersion:\s+([^/ ]+)/([^/ ]+)\s*$', '\2-\1', 'g')
  " Checking if version is core
  if l:path == l:versionLine
    let l:path = substitute(l:versionLine, '\v.*apiVersion:\s+([^/ ]+)\s*$', '\1-core', 'g')
  endif
  let l:hash = '\\#' . tolower(l:kind) . '-' . l:path
  exec 'silent !xdg-open https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.16/'
        \ . l:hash
  exec 'redraw!'
endfunction
command! -nargs=1 KubeHelp :call KubeHelp(<f-args>)
" }}}

"--- Plugin configurations ---
let g:UltiSnipsEditSplit = "vertical"
let g:UltiSnipsExpandTrigger = "<c-j>"
let g:UltiSnipsListSnippets = "<c-h>"
let g:UltiSnipsSnippetsDir = "~/.vim/UltiSnips"
let g:ale_languagetool_options = '--autoDetect -d WHITESPACE_RULE'
let g:ale_python_pylint_change_directory = 0
let g:ale_sh_shellcheck_options = '--external-sources'
let g:ale_lint_delay = 2000
let g:delimitMate_expand_cr = 2
" ale_fixers {{{
let g:ale_fixers = {
\   'python': [
\       'black',
\   ],
\ }
" }}}
let g:gist_open_browser_after_post = 1
let g:gutentags_cache_dir = s:dir_misc
let g:jsdoc_enable_es6 = 1
let g:netrw_keepdir = 0
let g:netrw_banner = 1
let g:netrw_browse_split = 4
let g:netrw_home = s:dir_misc
let g:netrw_liststyle = 0
let g:netrw_winsize = -40
let g:slime_paste_file = tempname()
let g:sh_fold_enabled = 7
let g:taboo_renamed_tab_format =' %N %l%m '
let g:taboo_tab_format = ' %N %f%m '
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
" {{{
let g:tagbar_type_typescript = {
  \   'ctagstype': 'typescript',
  \   'kinds': [
  \     'I:imports:1',
  \     'n:modules',
  \     'i:interfaces:1',
  \     'e:enums',
  \     'c:classes',
  \     'f:functions:1',
  \     'm:members',
  \     'S:state',
  \     'R:reducer',
  \     'v:variables',
  \     'C:components',
  \     'H:other hooks',
  \   ],
  \   'sro': '.',
  \   'kind2scope': {
  \     'i': 'interface',
  \     'c': 'class',
  \     'C': 'component',
  \     'f': 'function',
  \   },
  \   'scope2kind': {
  \     'interface': 'i',
  \     'class':    'c',
  \     'component': 'C',
  \     'variable': 'v',
  \     'function': 'f',
  \     'state': 'S',
  \   },
  \   'deffile': '~/.ctags.d/typescript.ctags'
  \ }
" }}}
let g:tagbar_type_jsx = g:tagbar_type_typescript
let g:vim_markdown_folding_disabled = 1
let g:vim_markdown_frontmatter = 1
let g:xml_syntax_folding=1
let test#strategy = 'vimux'

set modeline
set exrc
set secure

silent! source ~/.pdotfiles/vim/vimrc

" vim: fdm=marker fdl=0 fen
