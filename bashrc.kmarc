#!/usr/bin/env bash
# shellcheck disable=SC2016,SC1090,SC2155

####################
#  Initialization  #
####################
# Unset any funny command that would be executed before the prompt is shown
unset PROMPT_COMMAND

# Set a fallback terminal if there is no infocmp entry. This helps on older
# systems with no alacritty
if ! infocmp "$TERM" >/dev/null 2>&1; then
  export TERM=xterm-256color
fi

###########################
#  Environment variables  #
###########################
for _c in "$HOME"/.config/environment.d/*.conf; do
  source "$_c"
done
unset _c

export GPG_TTY=$(tty)

#############################
#  Host-specific overrides  #
#############################
# Supposedly a link to .pdotfiles/.../bashrc
if [ -f "$HOME"/.bashrc.local ]; then
  # shellcheck disable=SC1091
  source "$HOME"/.bashrc.local
fi

###################################
#  Autostart graphical interface  #
###################################
if [[ -z $DISPLAY ]] && [[ $(tty) = /dev/tty1 ]]; then
  #  https://wiki.archlinux.org/title/KDE
  exec /usr/lib/plasma-dbus-run-session-if-needed startplasma-wayland
fi

# Only continue if this is an interactive shell
if ! [[ $- = *i* ]]; then
  return 0
fi

###########################
#  Functions and aliases  #
###########################
alias ls="ls --color --group-directories-first"
alias diff='diff --color=auto'
alias grep='grep --color=auto'
alias mutt='neomutt'
alias teams-up='systemctl --user set-property teams.slice CPUQuota=$(( `nproc` * 100 ))%'
alias teams-down='systemctl --user set-property teams.slice CPUQuota=$(( `nproc` / 2 * 100 ))%'

function git-recursive-pull() {
    find . -type d -path '*/.git' -prune -printf "%h\n" \
      | xargs -n1 -P4 bash -c \
          'cd $1; if ! git pull --all &>/dev/null; then echo "ERROR:   $1"; else echo "SUCCESS: $1"; fi' --
}

function git-worktree() {
  if [ ${#*} -lt 2 ]; then
    2>&1 echo "Usage: git-worktree JIRA-NNN short-name"
    return 1
  fi
  local ticket orig_branch new_branch
  ticket="$1"
  new_branch=$2
  orig_branch="$(git rev-parse --abbrev-ref HEAD)"
  new_dir=../"$(basename "$PWD")"-"$new_branch"
  git fetch origin "$orig_branch"
  git worktree add "$new_dir" -B "$USER/$ticket-$new_branch"
  if [ -f .envrc ]; then
    cp .envrc "$new_dir/.envrc"
    direnv allow "$new_dir"
  fi
  if [ -f user.bazelrc ]; then
    cp user.bazelrc "$new_dir/user.bazelrc"
  fi
}

if type -p mvn >/dev/null; then
  _mvn_run() {
    echo mvn "$@"
    mvn "$@"
    echo mvn "$@"
  }
  alias mci='_mvn_run clean install'
  alias mcin='_mvn_run clean install -DskipTest'
  alias mjacoco='_mvn_run jacoco:report'
  alias mjavadoc='_mvn_run javadoc:aggregate'
  alias me='_mvn_run exec:java'
  alias mcie='_mvn_run clean install exec:java'
  alias med='MAVEN_OPTS=-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005 mvn exec:java'
  complete -o default -o nospace -F _mvn mci mcis mjacoco mjavadoc me mcie
fi

function cheat() {
  curl --max-time 10 "http://cheat.sh/$1?style=stata-light"
}

##########
#  tmux  #
##########
if type -p tmux &>/dev/null; then
  alias tmux-session="tmux attach -t Session || tmux new -s Session"

  function ssh-tmux() { ssh "$1" -t 'tmux attach'; }

  if [ -n "$TMUX" ]; then
    # shellcheck disable=SC2034
    PANE_ID=$(tmux display-message -p '#P')
  fi
fi

#########
#  fzf  #
#########
if type -p fzf &>/dev/null; then
  FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --border"
  FZF_DEFAULT_COMMAND="rg --files --hidden --follow --glob '!{.git,.svn,node_modules}'"

  # FZF keybindings are only sourced after the first bash-completion is used
  if [ -f  "$XDG_DATA_HOME/bash-completion/completions/fzf" ]; then
    source "$XDG_DATA_HOME/bash-completion/completions/fzf"
  fi

  # Arch fzf package doesn't register the completion and key-bingings scripts
  if [ -f /usr/share/fzf/completion.bash ]; then
    source /usr/share/fzf/completion.bash
  fi
  if [ -f /usr/share/fzf/key-bindings.bash ]; then
    source /usr/share/fzf/key-bindings.bash
  fi

  # # ALT-O opens selected file with xdg-open
  # function __fzf_open__() {
  #   local cmd file
  #   cmd="${FZF_ALT_O_COMMAND:-"command find -L . \\( -path '*/\\.*' -o -fstype 'devfs' -o -fstype 'devtmpfs' -o -fstype 'proc' \\) -prune \
  #     -o -type f -print 2> /dev/null | sed 1d | cut -b3-"}"
  #   file=$(eval "$cmd | $(__fzfcmd) +m $FZF_ALT_O_OPTS") && printf '/usr/bin/xdg-open %q/%q' "$PWD" "$file"
  # }

  # # bind \M-o to __fzf_open__()
  # if [[ ! -o vi ]]; then
  #   # ALT-O - open file
  #   bind '"\eo": " \C-e\C-u`__fzf_open__`\e\C-e\er\C-m"'
  # else
  #   # ALT-O - open file
  #   bind '"\eo": "\C-x\C-addi`__fzf_open__`\C-x\C-e\C-x\C-r\C-m"'
  #   bind -m vi-command '"\eo": "ddi`__fzf_open__`\C-x\C-e\C-x\C-r\C-m"'
  # fi

  # fzf-git.sh installed via submodule
  source "$HOME"/.local/opt/fzf-git/fzf-git.sh
fi

#############
#  kubectl  #
#############
if type -p kubectl >/dev/null; then
  alias k=kubectl
fi

###############
#  kubecolor  #
###############
if type -p kubecolor >/dev/null; then
  alias k=kubecolor
fi

#########
#  grc  #
#########
if type -p grc >/dev/null; then
  if [[ -s "/etc/profile.d/grc.sh" ]]; then
    GRC_ALIASES=true
    source /etc/profile.d/grc.sh
    # This alias enables colorized pipe (to less, etc)
    alias colourify='grc -s --colour=on'
  fi
fi

############
#  direnv  #
############
if type -p direnv &>/dev/null && ! type -t _direnv_hook &>/dev/null; then
  eval "$(direnv hook bash)"
fi

##################
#  liquidprompt  #
##################
if type -p liquidprompt &>/dev/null; then
  # Enable liquidprompt only in interactive and non-mc shells
  if [[ -z "$MC_SID" && $- = *i* ]]; then
    source "$(type -p liquidprompt)"
  fi
fi

